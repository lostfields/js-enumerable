/* eslint-disable */
// @ts-nocheck 

let parser = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options?) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleIndices = { Start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          function(test, left, right) {
              	return { 
                  	type: 'ConditionalExpression',
                      test: test,
                      left: left,
                      right: right
                  }
                },
          function(first, rest) {
                return buildTree(first, rest, function(result, element) {
                  return {
                    type: 'LogicalExpression',
                    operator: element[0][0].toLowerCase(),
                    left: result,
                    right: element[1]
                  };
                });
              },
          function(first, rest) {
                return buildTree(first, rest, function(result, element) {
                  return {
                    type: 'LogicalExpression',
                    operator: element[0][0].toLowerCase(),
                    left:  result,
                    right: element[1]
                  };
                });
              },
          function(first, rest) {
                return buildTree(first, rest, function(result, element) {
                  return {
                    type: 'BitwiseExpression',
                    operator: element[0][0].toLowerCase(),
                    left:  result,
                    right: element[1]
                  };
                });
              },
          function(first, rest) {
                return buildTree(first, rest, function(result, element) {
                  return {
                    type: 'RelationalExpression',
                    operator: element[0][0],
                    left:  result,
                    right: element[1]
                  };
                });
              },
          function(first, rest) {
                return buildTree(first, rest, function(result, element) {
                  return {
                    type: 'RelationalExpression',
                    operator: element[0][0].toLowerCase(),
                    left:  result,
                    right: element[1]
                  };
                });
              },
          function(first, rest) {
                return buildTree(first, rest, function(result, element) {
                  return {
                    type: 'ShiftExpression',
                    operator: element[0][0].toLowerCase(),
                    left:  result,
                    right: element[1]
                  };
                });
              },
          function(first, rest) {
                return buildTree(first, rest, function(result, element) {
                  return {
                    type: 'BinaryExpression',
                    operator: element[0][0].toLowerCase(),
                    left:  result,
                    right: element[1]
                  };
                });
              },
          function(operator, operand) { return operand.type === 'NumberLiteral' && (operator === '-' || operator === '+')
                  ? 
                  { 
                    type: 'NumberLiteral', 
                    value: (operator === '-' ? operator : '') + operand.value
                  }
                  :
                  (operator === '-' || operator === '+') && operand.type === 'PostfixExpression' && operand.argument.type === 'NumberLiteral'
                  ?
                  Object.assign(operand, {argument: { 
                  	type: 'NumberLiteral',
                      value: (operator === '-' ? operator : '') + operand.argument.value
                	}})
                  :
                  {
                    type: 'UnaryExpression', 
                    operator: operator, 
                    argument:  operand
                  };
              },
          function(operand, operator) { return operator 
          		? 
                  {
                  	type: 'PostfixExpression',
                      operator: operator,
                      argument: operand
                  }
                  :
                  operand
              },
          function(expr) { return expr; },
          function(qual, expr) { 
                return { 
              	type: 'ArrayExpression', 
                  object: qual, 
                  index: expr 
                };
              },
          function(qual, args) { 
                return {
                	type: 'CallExpression', 
                  object: qual,
                  arguments: args
                };
              },
          function(first, rest) {
                 return buildTree(first, rest, function(result, element) {
                  return {
                    type: 'MemberExpression',
                    object:  result,
                    property: element[1]
                  };
                });
              },
          function(op) { return op[0].toLowerCase(); },
          function(first, rest) { return buildList(first, rest, 1); },
          function(args) { return args || []; },
          function(exp) { return exp; },
          /^[ \t\r\n\f]/,
          peg$classExpectation([" ", "\t", "\r", "\n", "\f"], false, false),
          function(first, last) { return { type: 'Identifier', name: first + last.join('') }; },
          /^[a-z]/,
          peg$classExpectation([["a", "z"]], false, false),
          /^[A-Z]/,
          peg$classExpectation([["A", "Z"]], false, false),
          /^[_$]/,
          peg$classExpectation(["_", "$"], false, false),
          /^[0-9]/,
          peg$classExpectation([["0", "9"]], false, false),
          "`",
          peg$literalExpectation("`", false),
          "\\$",
          peg$literalExpectation("\\$", false),
          /^[{]/,
          peg$classExpectation(["{"], false, false),
          peg$anyExpectation(),
          "$",
          peg$literalExpectation("$", false),
          "\\${",
          peg$literalExpectation("\\${", false),
          "$\\{",
          peg$literalExpectation("$\\{", false),
          "\\$\\{",
          peg$literalExpectation("\\$\\{", false),
          /^[$`\\]/,
          peg$classExpectation(["$", "`", "\\"], false, false),
          function(capture) { return { 
                  type: 'TemplateLiteral', 
                  values: capture.reduce((r, v) => {
                      if(Array.isArray(v)) {
                      	if(typeof(r[r.length - 1]) != 'string')
                          	r.push('')  
                      	r[r.length - 1] += v[0] == undefined ? v[1] : v[0] + (v[1] == undefined ? v[2] : v[1])
                      } else {
                      	r.push(v);
                      }
                      return r;
                  }, []).map(v => typeof v == 'string' ? { type: 'Literal', value: v } : v )
                }
              },
          function(expression) { return {
              	type: 'TemplateExpression',
                  value: expression
                }
              },
          "true",
          peg$literalExpectation("true", false),
          function() { return { type: 'BooleanLiteral', value: true }; },
          "false",
          peg$literalExpectation("false", false),
          function() { return { type: 'BooleanLiteral', value: false }; },
          "null",
          peg$literalExpectation("null", false),
          function() { return { type: 'NullLiteral' }; },
          function(literal) { return literal; },
          function(first, rest) { return buildList(first, rest, 2)},
          function(properties) { return { type: 'ObjectLiteral', properties: properties } },
          ":",
          peg$literalExpectation(":", false),
          function(key, value) { return { type: 'Property', key: key, value: value} },
          function(elements) { return { type: 'ArrayLiteral', elements: elements } },
          /^[lL]/,
          peg$classExpectation(["l", "L"], false, false),
          function() { return { type: 'NumberLiteral', value: text() }; },
          "0",
          peg$literalExpectation("0", false),
          /^[1-9]/,
          peg$classExpectation([["1", "9"]], false, false),
          /^[_]/,
          peg$classExpectation(["_"], false, false),
          "0x",
          peg$literalExpectation("0x", false),
          "0X",
          peg$literalExpectation("0X", false),
          "0b",
          peg$literalExpectation("0b", false),
          "0B",
          peg$literalExpectation("0B", false),
          /^[01]/,
          peg$classExpectation(["0", "1"], false, false),
          /^[0-7]/,
          peg$classExpectation([["0", "7"]], false, false),
          ".",
          peg$literalExpectation(".", false),
          /^[fFdD]/,
          peg$classExpectation(["f", "F", "d", "D"], false, false),
          /^[eE]/,
          peg$classExpectation(["e", "E"], false, false),
          /^[+\-]/,
          peg$classExpectation(["+", "-"], false, false),
          /^[pP]/,
          peg$classExpectation(["p", "P"], false, false),
          /^[a-f]/,
          peg$classExpectation([["a", "f"]], false, false),
          /^[A-F]/,
          peg$classExpectation([["A", "F"]], false, false),
          "'",
          peg$literalExpectation("'", false),
          /^['\\\n\r]/,
          peg$classExpectation(["'", "\\", "\n", "\r"], false, false),
          function(chars) { return { type: 'Literal', value: chars.map(l => l[0] == undefined ? l[1] : l[0] + l[1]).join('') } },
          "\"",
          peg$literalExpectation("\"", false),
          /^["\\\n\r]/,
          peg$classExpectation(["\"", "\\", "\n", "\r"], false, false),
          "\\",
          peg$literalExpectation("\\", false),
          /^[btnfr"'`\\]/,
          peg$classExpectation(["b", "t", "n", "f", "r", "\"", "'", "`", "\\"], false, false),
          /^[0-3]/,
          peg$classExpectation([["0", "3"]], false, false),
          "u",
          peg$literalExpectation("u", false),
          "+",
          peg$literalExpectation("+", true),
          "&",
          peg$literalExpectation("&", true),
          "&&",
          peg$literalExpectation("&&", true),
          ",",
          peg$literalExpectation(",", false),
          "/",
          peg$literalExpectation("/", true),
          "==",
          peg$literalExpectation("==", true),
          "===",
          peg$literalExpectation("===", true),
          ">=",
          peg$literalExpectation(">=", true),
          ">",
          peg$literalExpectation(">", true),
          "-",
          peg$literalExpectation("-", false),
          "[",
          peg$literalExpectation("[", false),
          "{",
          peg$literalExpectation("{", false),
          "<=",
          peg$literalExpectation("<=", true),
          "(",
          peg$literalExpectation("(", false),
          "<",
          peg$literalExpectation("<", true),
          "<<",
          peg$literalExpectation("<<", true),
          ">>",
          peg$literalExpectation(">>", true),
          ">>>",
          peg$literalExpectation(">>>", true),
          "%",
          peg$literalExpectation("%", true),
          "!=",
          peg$literalExpectation("!=", true),
          "!==",
          peg$literalExpectation("!==", true),
          "!",
          peg$literalExpectation("!", true),
          "~",
          peg$literalExpectation("~", true),
          "|",
          peg$literalExpectation("|", true),
          "||",
          peg$literalExpectation("||", true),
          "^",
          peg$literalExpectation("^", true),
          peg$literalExpectation("+", false),
          "++",
          peg$literalExpectation("++", false),
          "--",
          peg$literalExpectation("--", false),
          "]",
          peg$literalExpectation("]", false),
          "}",
          peg$literalExpectation("}", false),
          ")",
          peg$literalExpectation(")", false),
          peg$literalExpectation("-", true),
          "*",
          peg$literalExpectation("*", true),
          "?",
          peg$literalExpectation("?", true)
        ],

        peg$bytecode = [
          peg$decode(";!"),
          peg$decode("%;\"/r#;5/i$;w/`$;5/W$;!/N$;5/E$;U/<$;5/3$;!/*$8): )#($ )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.# &;\""),
          peg$decode("%;#/\x85#$%%;m/,#;5/#$+\")(\"'#&'#/,#;#/#$+\")(\"'#&'#0I*%%;m/,#;5/#$+\")(\"'#&'#/,#;#/#$+\")(\"'#&'#&/)$8\":!\"\"! )(\"'#&'#"),
          peg$decode("%;$/\x85#$%%;T/,#;5/#$+\")(\"'#&'#/,#;$/#$+\")(\"'#&'#0I*%%;T/,#;5/#$+\")(\"'#&'#/,#;$/#$+\")(\"'#&'#&/)$8\":\"\"\"! )(\"'#&'#"),
          peg$decode("%;%/\x85#$%%;l/,#;5/#$+\")(\"'#&'#/,#;%/#$+\")(\"'#&'#0I*%%;l/,#;5/#$+\")(\"'#&'#/,#;%/#$+\")(\"'#&'#&/)$8\":#\"\"! )(\"'#&'#"),
          peg$decode("%;&/\x85#$%%;n/,#;5/#$+\")(\"'#&'#/,#;&/#$+\")(\"'#&'#0I*%%;n/,#;5/#$+\")(\"'#&'#/,#;&/#$+\")(\"'#&'#&/)$8\":#\"\"! )(\"'#&'#"),
          peg$decode("%;'/\x85#$%%;S/,#;5/#$+\")(\"'#&'#/,#;'/#$+\")(\"'#&'#0I*%%;S/,#;5/#$+\")(\"'#&'#/,#;'/#$+\")(\"'#&'#&/)$8\":#\"\"! )(\"'#&'#"),
          peg$decode("%;(/\u011B#$%%;Y/,#;5/#$+\")(\"'#&'#.h &%;Z/,#;5/#$+\")(\"'#&'#.O &%;h/,#;5/#$+\")(\"'#&'#.6 &%;i/,#;5/#$+\")(\"'#&'#/,#;(/#$+\")(\"'#&'#0\x94*%%;Y/,#;5/#$+\")(\"'#&'#.h &%;Z/,#;5/#$+\")(\"'#&'#.O &%;h/,#;5/#$+\")(\"'#&'#.6 &%;i/,#;5/#$+\")(\"'#&'#/,#;(/#$+\")(\"'#&'#&/)$8\":$\"\"! )(\"'#&'#"),
          peg$decode("%;)/\u011B#$%%;`/,#;5/#$+\")(\"'#&'#.h &%;[/,#;5/#$+\")(\"'#&'#.O &%;b/,#;5/#$+\")(\"'#&'#.6 &%;\\/,#;5/#$+\")(\"'#&'#/,#;)/#$+\")(\"'#&'#0\x94*%%;`/,#;5/#$+\")(\"'#&'#.h &%;[/,#;5/#$+\")(\"'#&'#.O &%;b/,#;5/#$+\")(\"'#&'#.6 &%;\\/,#;5/#$+\")(\"'#&'#/,#;)/#$+\")(\"'#&'#&/)$8\":%\"\"! )(\"'#&'#"),
          peg$decode("%;*/\xE9#$%%;e/,#;5/#$+\")(\"'#&'#.O &%;c/,#;5/#$+\")(\"'#&'#.6 &%;d/,#;5/#$+\")(\"'#&'#/,#;*/#$+\")(\"'#&'#0{*%%;e/,#;5/#$+\")(\"'#&'#.O &%;c/,#;5/#$+\")(\"'#&'#.6 &%;d/,#;5/#$+\")(\"'#&'#/,#;*/#$+\")(\"'#&'#&/)$8\":&\"\"! )(\"'#&'#"),
          peg$decode("%;+/\xB7#$%%;R/,#;5/#$+\")(\"'#&'#.6 &%;u/,#;5/#$+\")(\"'#&'#/,#;+/#$+\")(\"'#&'#0b*%%;R/,#;5/#$+\")(\"'#&'#.6 &%;u/,#;5/#$+\")(\"'#&'#/,#;+/#$+\")(\"'#&'#&/)$8\":'\"\"! )(\"'#&'#"),
          peg$decode("%;,/\xE9#$%%;v/,#;5/#$+\")(\"'#&'#.O &%;W/,#;5/#$+\")(\"'#&'#.6 &%;g/,#;5/#$+\")(\"'#&'#/,#;,/#$+\")(\"'#&'#0{*%%;v/,#;5/#$+\")(\"'#&'#.O &%;W/,#;5/#$+\")(\"'#&'#.6 &%;g/,#;5/#$+\")(\"'#&'#/,#;,/#$+\")(\"'#&'#&/)$8\":'\"\"! )(\"'#&'#"),
          peg$decode("%;1/2#;-/)$8\":(\"\"! )(\"'#&'#.# &;-"),
          peg$decode("%;./F#;p.# &;q.\" &\"/2$;5/)$8#:)#\"\"!)(#'#(\"'#&'#"),
          peg$decode(";/./ &;0.) &;9.# &;;"),
          peg$decode("%;a/L#;5/C$;!/:$;t/1$;5/($8%:*%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%%<;Q=.##&&!&'#/e#;6.# &;;/V$;^/M$;5/D$;!/;$;r/2$;5/)$8':+'\"%\")(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%%<;Q=.##&&!&'#/;#;6/2$;2/)$8#:,#\"! )(#'#(\"'#&'#.\xAF &%%<;Q=.##&&!&'#/t#;6.) &;M.# &;9/_$$%;X/,#;0/#$+\")(\"'#&'#06*%;X/,#;0/#$+\")(\"'#&'#&/)$8#:-#\"! )(#'#(\"'#&'#.B &%%<;Q=.##&&!&'#/,#;6/#$+\")(\"'#&'#"),
          peg$decode("%;j.\x9A &%;p/,#;5/#$+\")(\"'#&'#.\x81 &%;q/,#;5/#$+\")(\"'#&'#.h &%;o/,#;5/#$+\")(\"'#&'#.O &%;f/,#;5/#$+\")(\"'#&'#.6 &%;k/,#;5/#$+\")(\"'#&'#/' 8!:.!! )"),
          peg$decode("%;a/\xBD#;5/\xB4$%;!/\x85#$%%;V/,#;5/#$+\")(\"'#&'#/,#;!/#$+\")(\"'#&'#0I*%%;V/,#;5/#$+\")(\"'#&'#/,#;!/#$+\")(\"'#&'#&/)$8\":/\"\"! )(\"'#&'#.\" &\"/:$;t/1$;5/($8%:0%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;^/>#;5/5$;r/,$;5/#$+$)($'#(#'#(\"'#&'#"),
          peg$decode("%;^/L#;5/C$;!/:$;r/1$;5/($8%:1%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("$$42\"\"5!73/,#0)*42\"\"5!73&&&#0<*$42\"\"5!73/,#0)*42\"\"5!73&&&#&"),
          peg$decode("%;7/B#$;80#*;8&/2$;5/)$8#:4#\"\"!)(#'#(\"'#&'#"),
          peg$decode("45\"\"5!76.5 &47\"\"5!78.) &49\"\"5!7:"),
          peg$decode("45\"\"5!76.A &47\"\"5!78.5 &4;\"\"5!7<.) &49\"\"5!7:"),
          peg$decode("%2=\"\"6=7>/\u0287#$;:.\u013D &;N.\u0137 &%2?\"\"6?7@/L#%<4A\"\"5!7B=.##&&!&'#/1$1\"\"5!7C/#$+#)(#'#(\"'#&'#.\xF8 &%2D\"\"6D7E/L#%<4A\"\"5!7B=.##&&!&'#/1$1\"\"5!7C/#$+#)(#'#(\"'#&'#.\xB9 &%2F\"\"6F7G/1#1\"\"5!7C/#$+\")(\"'#&'#.\x95 &%2H\"\"6H7I/1#1\"\"5!7C/#$+\")(\"'#&'#.q &%2J\"\"6J7K/1#1\"\"5!7C/#$+\")(\"'#&'#.M &%%<4L\"\"5!7M=.##&&!&'#/1#1\"\"5!7C/#$+\")(\"'#&'#0\u0143*;:.\u013D &;N.\u0137 &%2?\"\"6?7@/L#%<4A\"\"5!7B=.##&&!&'#/1$1\"\"5!7C/#$+#)(#'#(\"'#&'#.\xF8 &%2D\"\"6D7E/L#%<4A\"\"5!7B=.##&&!&'#/1$1\"\"5!7C/#$+#)(#'#(\"'#&'#.\xB9 &%2F\"\"6F7G/1#1\"\"5!7C/#$+\")(\"'#&'#.\x95 &%2H\"\"6H7I/1#1\"\"5!7C/#$+\")(\"'#&'#.q &%2J\"\"6J7K/1#1\"\"5!7C/#$+\")(\"'#&'#.M &%%<4L\"\"5!7M=.##&&!&'#/1#1\"\"5!7C/#$+\")(\"'#&'#&/7$2=\"\"6=7>/($8#:N#!!)(#'#(\"'#&'#"),
          peg$decode("%2D\"\"6D7E/L#;_/C$;5/:$;!/1$;s/($8%:O%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;<.\xC2 &;D.\xBC &;?.\xB6 &;M.\xB0 &;>.\xAA &%2P\"\"6P7Q/<#%<;8=.##&&!&'#/'$8\":R\" )(\"'#&'#.{ &%2S\"\"6S7T/<#%<;8=.##&&!&'#/'$8\":U\" )(\"'#&'#.L &%2V\"\"6V7W/<#%<;8=.##&&!&'#/'$8\":X\" )(\"'#&'#/1#;5/($8\":Y\"!!)(\"'#&'#"),
          peg$decode("%;_/\xD3#;5/\xCA$%;=/q#$%;V/5#;5/,$;=/#$+#)(#'#(\"'#&'#0?*%;V/5#;5/,$;=/#$+#)(#'#(\"'#&'#&/)$8\":Z\"\"! )(\"'#&'#.\" &\"/d$%;V/,#;5/#$+\")(\"'#&'#.\" &\"/C$;5/:$;s/1$;5/($8':['!$)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;5/q#;6.) &;?.# &;M/\\$;5/S$2\\\"\"6\\7]/D$;5/;$;!/2$;5/)$8':^'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;^/\xD3#;5/\xCA$%;!/q#$%;V/5#;5/,$;!/#$+#)(#'#(\"'#&'#0?*%;V/5#;5/,$;!/#$+#)(#'#(\"'#&'#&/)$8\":Z\"\"! )(\"'#&'#.\" &\"/d$%;V/,#;5/#$+\")(\"'#&'#.\" &\"/C$;5/:$;r/1$;5/($8':_'!$)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;A./ &;B.) &;C.# &;@/;#4`\"\"5!7a.\" &\"/'$8\":b\" )(\"'#&'#"),
          peg$decode("2c\"\"6c7d.\x9B &%4e\"\"5!7f/\x8B#$%$4g\"\"5!7h0)*4g\"\"5!7h&/2#4;\"\"5!7</#$+\")(\"'#&'#0O*%$4g\"\"5!7h0)*4g\"\"5!7h&/2#4;\"\"5!7</#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),
          peg$decode("%2i\"\"6i7j.) &2k\"\"6k7l/,#;K/#$+\")(\"'#&'#"),
          peg$decode("%2m\"\"6m7n.) &2o\"\"6o7p/\x9A#4q\"\"5!7r/\x8B$$%$4g\"\"5!7h0)*4g\"\"5!7h&/2#4q\"\"5!7r/#$+\")(\"'#&'#0O*%$4g\"\"5!7h0)*4g\"\"5!7h&/2#4q\"\"5!7r/#$+\")(\"'#&'#&/#$+#)(#'#(\"'#&'#"),
          peg$decode("%2c\"\"6c7d/\x91#$%$4g\"\"5!7h0)*4g\"\"5!7h&/2#4s\"\"5!7t/#$+\")(\"'#&'#/R#0O*%$4g\"\"5!7h0)*4g\"\"5!7h&/2#4s\"\"5!7t/#$+\")(\"'#&'#&&&#/#$+\")(\"'#&'#"),
          peg$decode("%;G.# &;E/& 8!:b! )"),
          peg$decode("%;J/b#2u\"\"6u7v/S$;J.\" &\"/E$;F.\" &\"/7$4w\"\"5!7x.\" &\"/#$+%)(%'#($'#(#'#(\"'#&'#.\xB8 &%2u\"\"6u7v/N#;J/E$;F.\" &\"/7$4w\"\"5!7x.\" &\"/#$+$)($'#(#'#(\"'#&'#.w &%;J/@#;F/7$4w\"\"5!7x.\" &\"/#$+#)(#'#(\"'#&'#.J &%;J/@#;F.\" &\"/2$4w\"\"5!7x/#$+#)(#'#(\"'#&'#"),
          peg$decode("%4y\"\"5!7z/@#4{\"\"5!7|.\" &\"/,$;J/#$+#)(#'#(\"'#&'#"),
          peg$decode("%;H/@#;I/7$4w\"\"5!7x.\" &\"/#$+#)(#'#(\"'#&'#"),
          peg$decode("%2i\"\"6i7j.) &2k\"\"6k7l/I#;K.\" &\"/;$2u\"\"6u7v/,$;K/#$+$)($'#(#'#(\"'#&'#.A &%;A/7#2u\"\"6u7v.\" &\"/#$+\")(\"'#&'#"),
          peg$decode("%4}\"\"5!7~/@#4{\"\"5!7|.\" &\"/,$;J/#$+#)(#'#(\"'#&'#"),
          peg$decode("%4;\"\"5!7</\x8B#$%$4g\"\"5!7h0)*4g\"\"5!7h&/2#4;\"\"5!7</#$+\")(\"'#&'#0O*%$4g\"\"5!7h0)*4g\"\"5!7h&/2#4;\"\"5!7</#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),
          peg$decode("%;L/\x7F#$%$4g\"\"5!7h0)*4g\"\"5!7h&/,#;L/#$+\")(\"'#&'#0I*%$4g\"\"5!7h0)*4g\"\"5!7h&/,#;L/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),
          peg$decode("4\x7F\"\"5!7\x80.5 &4\x81\"\"5!7\x82.) &4;\"\"5!7<"),
          peg$decode("%2\x83\"\"6\x837\x84/\xA7#$;N.M &%%<4\x85\"\"5!7\x86=.##&&!&'#/1#1\"\"5!7C/#$+\")(\"'#&'#0S*;N.M &%%<4\x85\"\"5!7\x86=.##&&!&'#/1#1\"\"5!7C/#$+\")(\"'#&'#&/7$2\x83\"\"6\x837\x84/($8#:\x87#!!)(#'#(\"'#&'#.\xB7 &%2\x88\"\"6\x887\x89/\xA7#$;N.M &%%<4\x8A\"\"5!7\x8B=.##&&!&'#/1#1\"\"5!7C/#$+\")(\"'#&'#0S*;N.M &%%<4\x8A\"\"5!7\x8B=.##&&!&'#/1#1\"\"5!7C/#$+\")(\"'#&'#&/7$2\x88\"\"6\x887\x89/($8#:\x87#!!)(#'#(\"'#&'#"),
          peg$decode("%2\x8C\"\"6\x8C7\x8D/>#4\x8E\"\"5!7\x8F.) &;O.# &;P/#$+\")(\"'#&'#"),
          peg$decode("%4\x90\"\"5!7\x91/A#4s\"\"5!7t/2$4s\"\"5!7t/#$+#)(#'#(\"'#&'#.N &%4s\"\"5!7t/2#4s\"\"5!7t/#$+\")(\"'#&'#.) &4s\"\"5!7t"),
          peg$decode("%$2\x92\"\"6\x927\x93/,#0)*2\x92\"\"6\x927\x93&&&#/G#;L/>$;L/5$;L/,$;L/#$+%)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%2P\"\"6P7Q/8#%<;8=.##&&!&'#/#$+\")(\"'#&'#.s &%2S\"\"6S7T/8#%<;8=.##&&!&'#/#$+\")(\"'#&'#.H &%2V\"\"6V7W/8#%<;8=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("3\x94\"\"5!7\x95"),
          peg$decode("3\x96\"\"5!7\x97"),
          peg$decode("3\x98\"\"5\"7\x99"),
          peg$decode("2\\\"\"6\\7]"),
          peg$decode("2\x9A\"\"6\x9A7\x9B"),
          peg$decode("3\x9C\"\"5!7\x9D"),
          peg$decode("2u\"\"6u7v"),
          peg$decode("3\x9E\"\"5\"7\x9F"),
          peg$decode("3\xA0\"\"5#7\xA1"),
          peg$decode("3\xA2\"\"5\"7\xA3"),
          peg$decode("3\xA4\"\"5!7\xA5"),
          peg$decode("2\xA6\"\"6\xA67\xA7"),
          peg$decode("2\xA8\"\"6\xA87\xA9"),
          peg$decode("2\xAA\"\"6\xAA7\xAB"),
          peg$decode("3\xAC\"\"5\"7\xAD"),
          peg$decode("2\xAE\"\"6\xAE7\xAF"),
          peg$decode("3\xB0\"\"5!7\xB1"),
          peg$decode("3\xB2\"\"5\"7\xB3"),
          peg$decode("3\xB4\"\"5\"7\xB5"),
          peg$decode("3\xB6\"\"5#7\xB7"),
          peg$decode("2\xA6\"\"6\xA67\xA7"),
          peg$decode("3\xB8\"\"5!7\xB9"),
          peg$decode("3\xBA\"\"5\"7\xBB"),
          peg$decode("3\xBC\"\"5#7\xBD"),
          peg$decode("3\xBE\"\"5!7\xBF"),
          peg$decode("3\xC0\"\"5!7\xC1"),
          peg$decode("3\xC2\"\"5!7\xC3"),
          peg$decode("3\xC4\"\"5\"7\xC5"),
          peg$decode("3\xC6\"\"5!7\xC7"),
          peg$decode("2\x94\"\"6\x947\xC8"),
          peg$decode("2\xC9\"\"6\xC97\xCA"),
          peg$decode("2\xCB\"\"6\xCB7\xCC"),
          peg$decode("2\xCD\"\"6\xCD7\xCE"),
          peg$decode("2\xCF\"\"6\xCF7\xD0"),
          peg$decode("2\xD1\"\"6\xD17\xD2"),
          peg$decode("3\xA6\"\"5!7\xD3"),
          peg$decode("3\xD4\"\"5!7\xD5"),
          peg$decode("3\xD6\"\"5!7\xD7")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 88 + index,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }


      function buildList(first, rest, index) {
        var result = new Array(rest.length), i;

        for (i = 0; i < rest.length; i++) {
          result[i] = rest[i][index];
        }
        
        return [first].concat(result);
      }

      function buildTree(first, rest, builder) {
        var result = first, i;

        for (i = 0; i < rest.length; i++) {
          result = builder(result, rest[i]);
        }

        return result;
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();

export default parser