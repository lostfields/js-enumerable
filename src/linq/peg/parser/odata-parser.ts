/* eslint-disable */
// @ts-nocheck 

let parser = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options?) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleIndices = { Start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          function(first, rest) {
                return buildTree(first, rest, function(result, element) {
                  return {
                    type: 'LogicalExpression',
                    operator: '||',
                    left:  result,
                    right: element[1]
                  };
                });
              },
          function(first, rest) {
                return buildTree(first, rest, function(result, element) {
                  return {
                    type: 'LogicalExpression',
                    operator: '&&',
                    left: result,
                    right: element[1]
                  };
                });
              },
          function(first, rest) {
                return buildTree(first, rest, function(result, element) {
                  let map = { 'eq': '==', 'ne': '!=' }
                  
                  return {
                    type: 'RelationalExpression',
                    operator: map[element[0][0].toLowerCase()],
                    left:  result,
                    right: element[1]
                  };
                });
              },
          function(first, rest) {
                return buildTree(first, rest, function(result, element) {
                	let map = { 'le': '<=', 'ge': '>=', 'lt': '<', 'gt': '>' }
            
                  return {
                    type: 'RelationalExpression',
                    operator: map[element[0][0].toLowerCase()],
                    left:  result,
                    right: element[1]
                  };
                });
              },
          function(first, rest) {
                return buildTree(first, rest, function(result, element) {
                	let map = { 'add': '+', 'sub': '-' }
                
                  return {
                    type: 'BinaryExpression',
                    operator: map[element[0][0].toLowerCase()],
                    left:  result,
                    right: element[1]
                  };
                });
              },
          function(first, rest) {
                return buildTree(first, rest, function(result, element) {
                  let map = { 'mul': '*', 'div': '/', 'mod': '%' }
                  
                  return {
                    type: 'BinaryExpression',
                    operator: map[element[0][0].toLowerCase()],
                    left:  result,
                    right: element[1]
                  };
                });
              },
          function(operator, operand) {
                return operand.type === 'NumberLiteral' && (operator === '-' || operator === '+')
                  ? 
                  { 
                    type: 'NumberLiteral', 
                    value: (operator === '-' ? operator : '') + operand.value
                  }
                  :
                  {
                    type: 'UnaryExpression', 
                    operator: operator, 
                    argument:  operand
                  };
              },
          function(expr) { return expr; },
          function(qual, expr) { 
                return { 
              	type: 'ArrayExpression', 
                  array: qual, 
                  index: expr 
                };
              },
          function(qual, args) { 
                return {
                	type: 'CallExpression', 
                  object: qual,
                  arguments: args
                };
              },
          function(first, i) { return i; },
          function(first, list) { 
                if(list) {
                  return {
                    type: 'MemberExpression',
                    object: first,
                    property: list
                  }
                }
                return first;
              },
          function(op) { 
              	let map = { 'not': '!', '+': '+', '-': '-' }
              	return map[op[0].toLowerCase()]; 
              },
          function(first, rest) { return buildList(first, rest, 1); },
          function(args) { return args || []; },
          function(exp) { return exp; },
          /^[ \t\r\n\f]/,
          peg$classExpectation([" ", "\t", "\r", "\n", "\f"], false, false),
          function(first, last) { return { type: 'Identifier', name: first + last.join('') }; },
          /^[a-z]/,
          peg$classExpectation([["a", "z"]], false, false),
          /^[A-Z]/,
          peg$classExpectation([["A", "Z"]], false, false),
          /^[_$]/,
          peg$classExpectation(["_", "$"], false, false),
          /^[0-9]/,
          peg$classExpectation([["0", "9"]], false, false),
          "true",
          peg$literalExpectation("true", false),
          function() { return { type: 'BooleanLiteral', value: true }; },
          "false",
          peg$literalExpectation("false", false),
          function() { return { type: 'BooleanLiteral', value: false }; },
          "null",
          peg$literalExpectation("null", false),
          function() { return { type: 'NullLiteral' }; },
          function(literal) { return literal; },
          /^[lL]/,
          peg$classExpectation(["l", "L"], false, false),
          function() { return { type: 'NumberLiteral', value: text() }; },
          "0",
          peg$literalExpectation("0", false),
          /^[1-9]/,
          peg$classExpectation([["1", "9"]], false, false),
          /^[_]/,
          peg$classExpectation(["_"], false, false),
          "0x",
          peg$literalExpectation("0x", false),
          "0X",
          peg$literalExpectation("0X", false),
          "0b",
          peg$literalExpectation("0b", false),
          "0B",
          peg$literalExpectation("0B", false),
          /^[01]/,
          peg$classExpectation(["0", "1"], false, false),
          /^[0-7]/,
          peg$classExpectation([["0", "7"]], false, false),
          "-",
          peg$literalExpectation("-", false),
          "T",
          peg$literalExpectation("T", false),
          ":",
          peg$literalExpectation(":", false),
          ".",
          peg$literalExpectation(".", false),
          "Z",
          peg$literalExpectation("Z", false),
          function(value) { return { type: 'DateTimeLiteral', value: flattenArray(value).join('') }; },
          "datetime",
          peg$literalExpectation("datetime", true),
          "'",
          peg$literalExpectation("'", false),
          function(first, value, last) { return { type: 'DateTimeLiteral', value: flattenArray(value).join('') }; },
          function(value) { return { type: 'DateLiteral', value: flattenArray(value).join('') }; },
          "date",
          peg$literalExpectation("date", true),
          function(first, value, last) { return { type: 'DateLiteral', value: flattenArray(value).join('') }; },
          /^[fFdD]/,
          peg$classExpectation(["f", "F", "d", "D"], false, false),
          /^[eE]/,
          peg$classExpectation(["e", "E"], false, false),
          /^[+\-]/,
          peg$classExpectation(["+", "-"], false, false),
          /^[pP]/,
          peg$classExpectation(["p", "P"], false, false),
          /^[a-f]/,
          peg$classExpectation([["a", "f"]], false, false),
          /^[A-F]/,
          peg$classExpectation([["A", "F"]], false, false),
          /^['\\\n\r]/,
          peg$classExpectation(["'", "\\", "\n", "\r"], false, false),
          peg$anyExpectation(),
          function(chars) { return { type: 'Literal', value: chars.map(l => l[0] == undefined ? l[1] : l[0] + l[1]).join('').replace(/\\(["'\\])|'(')/g, '$1$2') } },
          "''",
          peg$literalExpectation("''", false),
          "\\",
          peg$literalExpectation("\\", false),
          /^[btnfr"'\\]/,
          peg$classExpectation(["b", "t", "n", "f", "r", "\"", "'", "\\"], false, false),
          /^[0-3]/,
          peg$classExpectation([["0", "3"]], false, false),
          "u",
          peg$literalExpectation("u", false),
          "add",
          peg$literalExpectation("add", true),
          "and",
          peg$literalExpectation("and", true),
          ",",
          peg$literalExpectation(",", false),
          "div",
          peg$literalExpectation("div", true),
          "/",
          peg$literalExpectation("/", false),
          "eq",
          peg$literalExpectation("eq", true),
          "ge",
          peg$literalExpectation("ge", true),
          "gt",
          peg$literalExpectation("gt", true),
          "[",
          peg$literalExpectation("[", false),
          "le",
          peg$literalExpectation("le", true),
          "(",
          peg$literalExpectation("(", false),
          "lt",
          peg$literalExpectation("lt", true),
          "mod",
          peg$literalExpectation("mod", true),
          "ne",
          peg$literalExpectation("ne", true),
          "not",
          peg$literalExpectation("not", true),
          "or",
          peg$literalExpectation("or", true),
          "+",
          peg$literalExpectation("+", false),
          "]",
          peg$literalExpectation("]", false),
          ")",
          peg$literalExpectation(")", false),
          "sub",
          peg$literalExpectation("sub", true),
          "mul",
          peg$literalExpectation("mul", true)
        ],

        peg$bytecode = [
          peg$decode(";!"),
          peg$decode("%;\"/\x85#$%%;[/,#;//#$+\")(\"'#&'#/,#;\"/#$+\")(\"'#&'#0I*%%;[/,#;//#$+\")(\"'#&'#/,#;\"/#$+\")(\"'#&'#&/)$8\": \"\"! )(\"'#&'#"),
          peg$decode("%;#/\x85#$%%;J/,#;//#$+\")(\"'#&'#/,#;#/#$+\")(\"'#&'#0I*%%;J/,#;//#$+\")(\"'#&'#/,#;#/#$+\")(\"'#&'#&/)$8\":!\"\"! )(\"'#&'#"),
          peg$decode("%;$/\xB7#$%%;O/,#;//#$+\")(\"'#&'#.6 &%;Y/,#;//#$+\")(\"'#&'#/,#;$/#$+\")(\"'#&'#0b*%%;O/,#;//#$+\")(\"'#&'#.6 &%;Y/,#;//#$+\")(\"'#&'#/,#;$/#$+\")(\"'#&'#&/)$8\":\"\"\"! )(\"'#&'#"),
          peg$decode("%;%/\u011B#$%%;T/,#;//#$+\")(\"'#&'#.h &%;P/,#;//#$+\")(\"'#&'#.O &%;V/,#;//#$+\")(\"'#&'#.6 &%;Q/,#;//#$+\")(\"'#&'#/,#;%/#$+\")(\"'#&'#0\x94*%%;T/,#;//#$+\")(\"'#&'#.h &%;P/,#;//#$+\")(\"'#&'#.O &%;V/,#;//#$+\")(\"'#&'#.6 &%;Q/,#;//#$+\")(\"'#&'#/,#;%/#$+\")(\"'#&'#&/)$8\":#\"\"! )(\"'#&'#"),
          peg$decode("%;&/\xB7#$%%;I/,#;//#$+\")(\"'#&'#.6 &%;_/,#;//#$+\")(\"'#&'#/,#;&/#$+\")(\"'#&'#0b*%%;I/,#;//#$+\")(\"'#&'#.6 &%;_/,#;//#$+\")(\"'#&'#/,#;&/#$+\")(\"'#&'#&/)$8\":$\"\"! )(\"'#&'#"),
          peg$decode("%;'/\xE9#$%%;`/,#;//#$+\")(\"'#&'#.O &%;M/,#;//#$+\")(\"'#&'#.6 &%;X/,#;//#$+\")(\"'#&'#/,#;'/#$+\")(\"'#&'#0{*%%;`/,#;//#$+\")(\"'#&'#.O &%;M/,#;//#$+\")(\"'#&'#.6 &%;X/,#;//#$+\")(\"'#&'#/,#;'/#$+\")(\"'#&'#&/)$8\":%\"\"! )(\"'#&'#"),
          peg$decode("%;+/2#;(/)$8\":&\"\"! )(\"'#&'#.# &;("),
          peg$decode(";).5 &;9./ &;:.) &;*.# &;3"),
          peg$decode("%;U/L#;//C$;!/:$;^/1$;//($8%:'%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%%<;H=.##&&!&'#/_#;0/V$;S/M$;//D$;!/;$;]/2$;//)$8':('\"%\")(''#(&'#(%'#($'#(#'#(\"'#&'#.\xA3 &%%<;H=.##&&!&'#/;#;0/2$;,/)$8#:)#\"! )(#'#(\"'#&'#.o &%%<;H=.##&&!&'#/Y#;0/P$%;N/2#;*/)$8\":*\"\"# )(\"'#&'#.\" &\"/)$8#:+#\"! )(#'#(\"'#&'#"),
          peg$decode("%%;Z/,#;//#$+\")(\"'#&'#.O &%;\\/,#;//#$+\")(\"'#&'#.6 &%;W/,#;//#$+\")(\"'#&'#/' 8!:,!! )"),
          peg$decode("%;U/\xBD#;//\xB4$%;!/\x85#$%%;L/,#;//#$+\")(\"'#&'#/,#;!/#$+\")(\"'#&'#0I*%%;L/,#;//#$+\")(\"'#&'#/,#;!/#$+\")(\"'#&'#&/)$8\":-\"\"! )(\"'#&'#.\" &\"/:$;^/1$;//($8%:.%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;S/>#;//5$;]/,$;//#$+$)($'#(#'#(\"'#&'#"),
          peg$decode("%;S/L#;//C$;!/:$;]/1$;//($8%:/%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("$$40\"\"5!71/,#0)*40\"\"5!71&&&#0<*$40\"\"5!71/,#0)*40\"\"5!71&&&#&"),
          peg$decode("%;1/B#$;20#*;2&/2$;//)$8#:2#\"\"!)(#'#(\"'#&'#"),
          peg$decode("43\"\"5!74.5 &45\"\"5!76.) &47\"\"5!78"),
          peg$decode("43\"\"5!74.A &45\"\"5!76.5 &49\"\"5!7:.) &47\"\"5!78"),
          peg$decode("%;;.\xB6 &;4.\xB0 &;D.\xAA &%2;\"\"6;7</<#%<;2=.##&&!&'#/'$8\":=\" )(\"'#&'#.{ &%2>\"\"6>7?/<#%<;2=.##&&!&'#/'$8\":@\" )(\"'#&'#.L &%2A\"\"6A7B/<#%<;2=.##&&!&'#/'$8\":C\" )(\"'#&'#/1#;//($8\":D\"!!)(\"'#&'#"),
          peg$decode("%;6./ &;7.) &;8.# &;5/;#4E\"\"5!7F.\" &\"/'$8\":G\" )(\"'#&'#"),
          peg$decode("2H\"\"6H7I.\x9B &%4J\"\"5!7K/\x8B#$%$4L\"\"5!7M0)*4L\"\"5!7M&/2#49\"\"5!7:/#$+\")(\"'#&'#0O*%$4L\"\"5!7M0)*4L\"\"5!7M&/2#49\"\"5!7:/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),
          peg$decode("%2N\"\"6N7O.) &2P\"\"6P7Q/,#;B/#$+\")(\"'#&'#"),
          peg$decode("%2R\"\"6R7S.) &2T\"\"6T7U/\x9A#4V\"\"5!7W/\x8B$$%$4L\"\"5!7M0)*4L\"\"5!7M&/2#4V\"\"5!7W/#$+\")(\"'#&'#0O*%$4L\"\"5!7M0)*4L\"\"5!7M&/2#4V\"\"5!7W/#$+\")(\"'#&'#&/#$+#)(#'#(\"'#&'#"),
          peg$decode("%2H\"\"6H7I/\x91#$%$4L\"\"5!7M0)*4L\"\"5!7M&/2#4X\"\"5!7Y/#$+\")(\"'#&'#/R#0O*%$4L\"\"5!7M0)*4L\"\"5!7M&/2#4X\"\"5!7Y/#$+\")(\"'#&'#&&&#/#$+\")(\"'#&'#"),
          peg$decode("%%49\"\"5!7:/\u0198#49\"\"5!7:/\u0189$49\"\"5!7:/\u017A$49\"\"5!7:/\u016B$2Z\"\"6Z7[/\u015C$49\"\"5!7:/\u014D$49\"\"5!7:/\u013E$2Z\"\"6Z7[/\u012F$49\"\"5!7:/\u0120$49\"\"5!7:/\u0111$%2\\\"\"6\\7]/\xE4#49\"\"5!7:/\xD5$49\"\"5!7:/\xC6$2^\"\"6^7_/\xB7$49\"\"5!7:/\xA8$49\"\"5!7:/\x99$%2^\"\"6^7_/{#49\"\"5!7:/l$49\"\"5!7:/]$%2`\"\"6`7a/?#$49\"\"5!7:0)*49\"\"5!7:&/#$+\")(\"'#&'#.\" &\"/#$+$)($'#(#'#(\"'#&'#.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#/7$2b\"\"6b7c.\" &\"/#$+,)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#/1#;//($8\":d\"!!)(\"'#&'#.\u01F4 &%3e\"\"5(7f/\u01E4#2g\"\"6g7h/\u01D5$%49\"\"5!7:/\u019D#49\"\"5!7:/\u018E$49\"\"5!7:/\u017F$49\"\"5!7:/\u0170$2Z\"\"6Z7[/\u0161$49\"\"5!7:/\u0152$49\"\"5!7:/\u0143$2Z\"\"6Z7[/\u0134$49\"\"5!7:/\u0125$49\"\"5!7:/\u0116$%2\\\"\"6\\7]/\xE4#49\"\"5!7:/\xD5$49\"\"5!7:/\xC6$2^\"\"6^7_/\xB7$49\"\"5!7:/\xA8$49\"\"5!7:/\x99$%2^\"\"6^7_/{#49\"\"5!7:/l$49\"\"5!7:/]$%2`\"\"6`7a/?#$49\"\"5!7:0)*49\"\"5!7:&/#$+\")(\"'#&'#.\" &\"/#$+$)($'#(#'#(\"'#&'#.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.\" &\"/7$2b\"\"6b7c.\" &\"/#$+,)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#/B$2g\"\"6g7h/3$;//*$8%:i%#$\"!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%%49\"\"5!7:/\xBE#49\"\"5!7:/\xAF$49\"\"5!7:/\xA0$49\"\"5!7:/\x91$2Z\"\"6Z7[/\x82$49\"\"5!7:/s$49\"\"5!7:/d$2Z\"\"6Z7[/U$49\"\"5!7:/F$49\"\"5!7:/7$2b\"\"6b7c.\" &\"/#$++)(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#/1#;//($8\":j\"!!)(\"'#&'#.\u0115 &%3k\"\"5$7l/\u0105#2g\"\"6g7h/\xF6$%49\"\"5!7:/\xBE#49\"\"5!7:/\xAF$49\"\"5!7:/\xA0$49\"\"5!7:/\x91$2Z\"\"6Z7[/\x82$49\"\"5!7:/s$49\"\"5!7:/d$2Z\"\"6Z7[/U$49\"\"5!7:/F$49\"\"5!7:/7$2b\"\"6b7c.\" &\"/#$++)(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#/B$2g\"\"6g7h/3$;//*$8%:m%#$\"!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;>.# &;</& 8!:G! )"),
          peg$decode("%;A/b#2`\"\"6`7a/S$;A.\" &\"/E$;=.\" &\"/7$4n\"\"5!7o.\" &\"/#$+%)(%'#($'#(#'#(\"'#&'#.\xB8 &%2`\"\"6`7a/N#;A/E$;=.\" &\"/7$4n\"\"5!7o.\" &\"/#$+$)($'#(#'#(\"'#&'#.w &%;A/@#;=/7$4n\"\"5!7o.\" &\"/#$+#)(#'#(\"'#&'#.J &%;A/@#;=.\" &\"/2$4n\"\"5!7o/#$+#)(#'#(\"'#&'#"),
          peg$decode("%4p\"\"5!7q/@#4r\"\"5!7s.\" &\"/,$;A/#$+#)(#'#(\"'#&'#"),
          peg$decode("%;?/@#;@/7$4n\"\"5!7o.\" &\"/#$+#)(#'#(\"'#&'#"),
          peg$decode("%2N\"\"6N7O.) &2P\"\"6P7Q/I#;B.\" &\"/;$2`\"\"6`7a/,$;B/#$+$)($'#(#'#(\"'#&'#.A &%;6/7#2`\"\"6`7a.\" &\"/#$+\")(\"'#&'#"),
          peg$decode("%4t\"\"5!7u/@#4r\"\"5!7s.\" &\"/,$;A/#$+#)(#'#(\"'#&'#"),
          peg$decode("%49\"\"5!7:/\x8B#$%$4L\"\"5!7M0)*4L\"\"5!7M&/2#49\"\"5!7:/#$+\")(\"'#&'#0O*%$4L\"\"5!7M0)*4L\"\"5!7M&/2#49\"\"5!7:/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),
          peg$decode("%;C/\x7F#$%$4L\"\"5!7M0)*4L\"\"5!7M&/,#;C/#$+\")(\"'#&'#0I*%$4L\"\"5!7M0)*4L\"\"5!7M&/,#;C/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),
          peg$decode("4v\"\"5!7w.5 &4x\"\"5!7y.) &49\"\"5!7:"),
          peg$decode("%2g\"\"6g7h/\xA7#$;E.M &%%<4z\"\"5!7{=.##&&!&'#/1#1\"\"5!7|/#$+\")(\"'#&'#0S*;E.M &%%<4z\"\"5!7{=.##&&!&'#/1#1\"\"5!7|/#$+\")(\"'#&'#&/7$2g\"\"6g7h/($8#:}#!!)(#'#(\"'#&'#"),
          peg$decode("2~\"\"6~7\x7F.N &%2\x80\"\"6\x807\x81/>#4\x82\"\"5!7\x83.) &;F.# &;G/#$+\")(\"'#&'#"),
          peg$decode("%4\x84\"\"5!7\x85/A#4X\"\"5!7Y/2$4X\"\"5!7Y/#$+#)(#'#(\"'#&'#.N &%4X\"\"5!7Y/2#4X\"\"5!7Y/#$+\")(\"'#&'#.) &4X\"\"5!7Y"),
          peg$decode("%$2\x86\"\"6\x867\x87/,#0)*2\x86\"\"6\x867\x87&&&#/G#;C/>$;C/5$;C/,$;C/#$+%)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%2;\"\"6;7</8#%<;2=.##&&!&'#/#$+\")(\"'#&'#.s &%2>\"\"6>7?/8#%<;2=.##&&!&'#/#$+\")(\"'#&'#.H &%2A\"\"6A7B/8#%<;2=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode("3\x88\"\"5#7\x89"),
          peg$decode("3\x8A\"\"5#7\x8B"),
          peg$decode("2^\"\"6^7_"),
          peg$decode("2\x8C\"\"6\x8C7\x8D"),
          peg$decode("3\x8E\"\"5#7\x8F"),
          peg$decode("2\x90\"\"6\x907\x91"),
          peg$decode("3\x92\"\"5\"7\x93"),
          peg$decode("3\x94\"\"5\"7\x95"),
          peg$decode("3\x96\"\"5\"7\x97"),
          peg$decode("2Z\"\"6Z7["),
          peg$decode("2\x98\"\"6\x987\x99"),
          peg$decode("3\x9A\"\"5\"7\x9B"),
          peg$decode("2\x9C\"\"6\x9C7\x9D"),
          peg$decode("3\x9E\"\"5\"7\x9F"),
          peg$decode("2Z\"\"6Z7["),
          peg$decode("3\xA0\"\"5#7\xA1"),
          peg$decode("3\xA2\"\"5\"7\xA3"),
          peg$decode("3\xA4\"\"5#7\xA5"),
          peg$decode("3\xA6\"\"5\"7\xA7"),
          peg$decode("2\xA8\"\"6\xA87\xA9"),
          peg$decode("2\xAA\"\"6\xAA7\xAB"),
          peg$decode("2\xAC\"\"6\xAC7\xAD"),
          peg$decode("3\xAE\"\"5#7\xAF"),
          peg$decode("3\xB0\"\"5#7\xB1")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 65 + index,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }


      function buildList(first, rest, index) {
        var result = new Array(rest.length), i;

        for (i = 0; i < rest.length; i++) {
          result[i] = rest[i][index];
        }
        
        return [first].concat(result);
      }

      function buildTree(first, rest, builder) {
        var result = first, i;

        for (i = 0; i < rest.length; i++) {
          result = builder(result, rest[i]);
        }

        return result;
      }
      
      function flattenArray(value) {
      	return Array.isArray(value) ? [].concat.apply([], value.map(function(v) { return flattenArray(v) })) : value
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();

export default parser